#!/bin/bash
#
# Little helper to parse args
#

set -eEu
trap '[ "$?" -ne 77 ] || exit 0' ERR

# convert dataset relpath within HAMMERPANTS to a dataset ID
function relpath2id () {
  local base="${1:-}"
  echo "$(echo ${2:$(expr length "$base")} | tr -d '/')"
}

# convert dataset ID to relpath within HAMMERPANTS
function id2relpath () {
  echo "${1:0:3}/${1:3}"
}

function printHelp () {
  if [[ -z "${SUBCOMMANDS:-}" ]]; then
    local subcommands=
    local _help=$(cat <<EOF
$HELP_TXT

Args:
EOF
    )
  else
    local subcommands="SUBCOMMAND"
    local subcmd_help=$(echo "$SUBCOMMANDS" | sed 's/^/         /g')
    local _help=$(cat <<EOF
$HELP_TXT

Args:
  SUBCOMMAND:
$subcmd_help
EOF
    )
  fi
  >&2 cat <<EOF
USAGE: riatools $COMMAND $subcommands [PATH [ID]]

$_help
 
  PATH   if no ID, the path to a valid ria dataset. If ID, the path to a ria datastore
         if no path passed, the current directory must be a valid ria dataset
         (containing a ria-layout-version file)
          
  ID     SHA-1 key of a ria dataset within the passed ria datastore


EOF
}

function length () {
  echo $1 | wc -w
}

function get () {
  echo $2 | cut -d' ' -f$1
}

parse_args () {
  local params=
  err () {
    echo "Error: Unsupported flag $1" >&2
    exit 1
  }
  while [[ -n "${1:-}" && ! "$1" == "--" ]]; do
    case "$1" in
      -h | --help )
        printHelp
        exit 77
        ;;
      -* | --* )
        ${PARSER:-err}
        ;;
      * )
        params="$params $1"
        ;;
    esac;
    shift;
  done
  if [[ "${1:-}" == '--' ]]; then shift; fi
  params="$params ${*}"
  echo "$params"
}
 
ACTIVE_DS_BASE=
ACTIVE_DS_ID=
ACTIVE_DS_PATH=
ACTIVE_DS=
set_active_ds () {
  local arg base id
  check_arg () {
    if [[ ! -e "$1" ]]; then
      >&2 echo "Directory does not exist: '$1'"
      return 1
    fi
  }
  if [ $(length "$@") = 2 ]; then
    arg=$(get 1 "$@")
    check_arg "$arg" || return 1
    base="$(readlink -v -f $arg)"
    id="$(get 2 "$@"))"
  elif [ $(length "$@") = 1 ]; then
    arg=$(get 1 "$@")
    check_arg "$arg" || return 1
    base="$(readlink -v -f "$arg/../..")"
    id="$(relpath2id $base $(readlink -v -f "$arg") )"
  elif [ -e ria-layout-version ]; then
    base="$(readlink -v -f ../..)"
    id="$(relpath2id $base $(readlink -v -f .) )"
  else
    echo "Error: Invalid args '$(echo "$@" | trim | cut -f2- -d' ')'" >&2
    return 1
  fi
  if [ "$(expr length "$id")" != 36 ]; then
    >&2 echo "Not a ria dataset location"
    return 1
  fi
  ACTIVE_DS_BASE="$base"
  ACTIVE_DS_ID="$id"
  ACTIVE_DS_PATH="$base/$(id2relpath $id)"
  ACTIVE_DS=1
}

try_set_active_ds () {
  set_active_ds "$@" || true
}

is_active () {
  if [ -n "$ACTIVE_DS" ]; then
    return 0
  else
    return 1
  fi
}

get_active_ds () {
  if ! is_active; then
    >&2 echo "dataset not activated. First call 'set_active_ds'"
    exit 1
  fi
  case "$1" in
    path )
      echo "$ACTIVE_DS_PATH"
      ;;
    base )
      echo "$ACTIVE_DS_BASE"
      ;;
    id )
      echo "$ACTIVE_DS_ID"
      ;;
    * )
      >&2 echo "Invalid argument to 'get_active_ds': '$1'"
      exit 1
    esac
}

print_active_ds () {
  >&2 echo "datastore:   $(get_active_ds base)"
  >&2 echo "DATASET:     $(get_active_ds path)"
  >&2 echo "DATASET_ID:  $(get_active_ds id)"
}

git_ds () {
  git --git-dir $(get_active_ds path) "$@"
}

